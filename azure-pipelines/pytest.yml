trigger:
  branches:
    include:
      - dev/ci/*

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    Python39:
      python.version: '3.9'
    Python310:
      python.version: '3.10'

steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      PYTHON_VERSION=$(python -VV)
      echo "##vso[task.setvariable variable=PYTHON_VERSION;]$PYTHON_VERSION"
    displayName: detect python version

  - task: Cache@2
    inputs:
      cacheHitVar: CACHE_RESTORED
      key: '"venv" | "$(Agent.OS)" | "$(PYTHON_VERSION)" | pyproject.toml'
      path: $(Build.SourcesDirectory)/.venv
    displayName: cache venv

  - script: python -m venv .venv
    condition: ne(variables.CACHE_RESTORED, 'true')
    displayName: create venv

  - script: .venv/bin/pip install --upgrade --editable=".[test]"
    env:
      PIP_USE_PEP517: 1
    displayName: 'Install InvokeAI'

  - script: .venv/bin/pytest
    displayName: 'run pytest'

  - task: PublishTestResults@1
    condition: succeededOrFailed()
    inputs:
      testRunner: 'JUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/**/test-*.xml'
      testRunTitle: Python-$(python.version) on $(Build.SourceBranchName)

  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
      reportDirectory: $(Build.SourcesDirectory)/htmlcov
