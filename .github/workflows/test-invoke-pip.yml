name: Test invoke.py pip
on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'

jobs:
  matrix:
    strategy:
      fail-fast: false
      matrix:
        stable-diffusion-model:
          - stable-diffusion-1.5
        requirements-file:
          - requirements-lin-cuda.txt
          - requirements-lin-amd.txt
          - requirements-mac-mps-cpu.txt
        python-version:
          - '3.9'
          - '3.10'
        include:
          - requirements-file: requirements-lin-cuda.txt
            os: ubuntu-latest
            default-shell: bash -l {0}
          - requirements-file: requirements-lin-amd.txt
            os: ubuntu-latest
            default-shell: bash -l {0}
          - requirements-file: requirements-mac-mps-cpu.txt
            os: macOS-12
            default-shell: bash -l {0}
          - stable-diffusion-model: stable-diffusion-1.5
            stable-diffusion-model-url: https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.ckpt
            stable-diffusion-model-dl-path: models/ldm/stable-diffusion-v1/v1-5-pruned-emaonly.ckpt
    name: ${{ matrix.requirements-file }} on ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.default-shell }}
    steps:
      - name: Checkout sources
        id: checkout-sources
        uses: actions/checkout@v3

      - name: create models.yaml from example
        run: cp configs/models.yaml.example configs/models.yaml

      - name: set test prompt to main branch validation
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "TEST_PROMPTS=tests/preflight_prompts.txt" >> $GITHUB_ENV

      - name: set test prompt to development branch validation
        if: ${{ github.ref == 'refs/heads/development' }}
        run: echo "TEST_PROMPTS=tests/dev_prompts.txt" >> $GITHUB_ENV

      - name: set test prompt to Pull Request validation
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        run: echo "TEST_PROMPTS=tests/validate_pr_prompt.txt" >> $GITHUB_ENV

      - name: create requirements.txt
        run: cp environments-and-requirements/${{ matrix.requirements-file }} requirements.txt

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: install dependencies
        run: ${{ env.pythonLocation }}/bin/pip install --upgrade pip setuptools wheel

      - name: install requirements
        run: ${{ env.pythonLocation }}/bin/pip install --prefer-binary -r requirements.txt

      - name: Use Cached Stable Diffusion Model
        id: cache-sd-model
        uses: actions/cache@v3
        env:
          cache-name: cache-${{ matrix.stable-diffusion-model }}
        with:
          path: ${{ matrix.stable-diffusion-model-dl-path }}
          key: ${{ env.cache-name }}

      - name: Download ${{ matrix.stable-diffusion-model }}
        id: download-stable-diffusion-model
        if: ${{ steps.cache-sd-model.outputs.cache-hit != 'true' }}
        run: |
          [[ -d models/ldm/stable-diffusion-v1 ]] \
            || mkdir -p models/ldm/stable-diffusion-v1
          curl \
            -H "Authorization: Bearer ${{ secrets.HUGGINGFACE_TOKEN }}" \
            -o ${{ matrix.stable-diffusion-model-dl-path }} \
            -L ${{ matrix.stable-diffusion-model-url }}

      - name: run preload_models.py
        id: run-preload-models
        run: |
          ${{ env.pythonLocation }}/bin/python scripts/preload_models.py \
            --no-interactive

      - name: Run the tests
        id: run-tests
        run: |
          time ${{ env.pythonLocation }}/bin/python scripts/invoke.py \
            --model ${{ matrix.stable-diffusion-model }} \
            --from_file ${{ env.TEST_PROMPTS }}

      - name: Archive results
        id: archive-results
        uses: actions/upload-artifact@v3
        with:
          name: results_${{ matrix.requirements-file }}_${{ matrix.python-version }}
          path: outputs/img-samples
