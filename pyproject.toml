[build-system]
requires = [
  "setuptools>=65.5.1",
  "pip>=22.3.1",
  "wheel",
  "trove-classifiers",
]
build-backend = "setuptools.build_meta"

[project]
name = "InvokeAI"
description = "An implementation of Stable Diffusion which provides various new features and options to aid the image generation process"
requires-python = ">=3.8, <3.11"
readme = {file = "README.md", content-type = "text/markdown", charset = "UTF-8"}
keywords = [
  "stable-diffusion",
  "AI",
]
dynamic = [
  "version"
]
license = {file = "LICENSE"}
authors = [
  {name = "The InvokeAI Project",email = "lincoln.stein@gmail.com"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: GPU",
  "Environment :: GPU :: NVIDIA CUDA",
  "Environment :: MacOS X",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Artistic Software",
  "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
  "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
  "Topic :: Multimedia :: Graphics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Processing",
]
dependencies = [
  "accelerate",
  "albumentations",
  "clip_anytorch", # "clip @ https://github.com/openai/CLIP/archive/eaa22acb90a5876642d0507623e859909230a52d.zip",
  "clipseg @ https://github.com/invoke-ai/clipseg/archive/relaxed-python-requirement.zip",
  "diffusers[torch]~=0.11",
  "einops",
  "eventlet",
  "facexlib",
  "flask==2.1.3",
  "flask_cors==3.0.10",
  "flask_socketio==5.3.0",
  "flaskwebgui==1.0.3",
  "getpass_asterisk",
  "gfpgan==1.3.8",
  # "grpcio<1.51.0; sys_platform == 'darwin'",
  "huggingface-hub>=0.11.1",
  # "imageio",
  "imageio-ffmpeg",
  "k-diffusion", # "k-diffusion @ https://github.com/Birch-san/k-diffusion/archive/refs/heads/mps.zip",
  "kornia",
  "npyscreen",
  "numpy<1.24,>=1.23",
  "omegaconf",
  "opencv-python",
  "picklescan",
  "pillow",
  # "protobuf==3.20.3; sys_platform == 'darwin'",
  "pudb",
  "pyparsing",
  "pypatchmatch",
  "pyreadline3",
  "pytorch-lightning~=1.7.7",
  "realesrgan",
  "requests>=2.25.1",
  "safetensors",
  "scikit-image>=0.19",
  "send2trash",
  "streamlit",
  "taming-transformers-rom1504",
  "test-tube>=0.7.5",
  "torch>=1.13.1",
  "torch-fidelity",
  "torchvision>=0.14.1",
  "torchmetrics",
  "transformers~=4.25",
  "windows-curses; sys_platform == 'win32'",
]

[project.optional-dependencies]
"dev" = [
  "black",        # formatter
  "isort",        # sort imports
  "pylint",       # linter
  "pylance",      # language server
  "pip-tools",    # requirements management
  "pipdeptree",   # create a dependenciy-tree
  "twine",        # package distributrion
]
"docs" = [
  "mkdocs-material<9.0",
  "mkdocs-git-revision-date-localized-plugin",
  "mkdocs-redirects==1.2.0",
]
test = [
  "pytest>6.0.0",
  "pytest-cov"
]
"xformers" = [
  "ninja",
  "xformers @ git+https://github.com/facebookresearch/xformers.git@main",
]

[project.scripts]
"configure_invokeai" = "scripts:configure_invokeai.main"
"dream" = "ldm.invoke:CLI.main"
"invoke" = "ldm.invoke:CLI.main"
"legacy_api" = "scripts:legacy_api.main"
"load_models" = "scripts:configure_invokeai.main"
"merge_embeddings" = "scripts:merge_embeddings.main"
"preload_models" = "scripts:configure_invokeai.main"

[project.urls]
"Homepage" = "https://invoke-ai.github.io/InvokeAI/"
"Documentation" = "https://invoke-ai.github.io/InvokeAI/"
"Source" = "https://github.com/invoke-ai/InvokeAI/"
"Bug Reports" = "https://github.com/invoke-ai/InvokeAI/issues"
"Discord" = "https://discord.gg/ZmtBAhwWhy"

[tool.setuptools.dynamic]
version = {attr = "ldm.invoke.__version__"}

[tool.setuptools.packages.find]
"where" = [
  # "src",
  "."
]
"include" = [
  "assets",
  "backend*",
  # "clipseg*",
  "configs*",
  "frontend.dist*",
  "ldm*",
  "scripts*",
]

[tool.setuptools.package-data]
"assets" = [
  "caution.png"
]
"backend" = [
  "modules/test_images/*.png"
]
"configs" = [
  "*.example",
  "**/*.yaml",
  "*.txt"
]
"frontend.dist" = [
  "**"
]

[tool.setuptools.exclude-package-data]
configs = [
  "models.yaml"
]

[tool.black]
line-length = 88
target-version = [
  "py39",
  "py310"
]
include = '\.pyi?$'
extend-exclude = '''
/(
  # src/clipseg
  | tests
  | .venv
)/
'''

[tool.isort]
profile = "black"
extend_skip = [
  ".venv",
  "build",
  # "src/clipseg",
  "data",
]
src_paths = [
  ".",
  # "src",
]
skip_gitignore = true

[tool.pylint.format]
max-line-length = "88"

[tool.pylint.basic]
good-names = [
  "e",
  "i",
  "j",
  "k",
  "ex",
  "Run",
  "_",
]

[tool.pylint.main]
fail-under = 10.0
ignore = [
  # "src.clipseg",
  ".venv",
  "build",
  "dist",
  "tests",
]
jobs = 0

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-p pytest_cov --junitxml=junit/test-results.xml --cov=."
python_files = [
  "test_*.py"
]
pythonpath = [
  ".venv/lib/python3.9",
  ".venv/lib/python3.10",
]
testpaths = [
  "tests",
]
